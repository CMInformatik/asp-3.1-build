name: 'Build ASP 3.1'
description: 'Builds ASP Core 3.1 WebApps'
inputs:
  app-name:
    description: 'Name for artifacts and Docker images'
    required: true
    default: 'aspapp'
  myget-pre-auth-url:
    default: ""
  docker-username:
    required: true
  docker-password:
    required: true
runs:
  using: "composite"
  steps:
  - name: Add nuget.config
    shell: bash
    run: |
      dotnet new nugetconfig -o ./nuget.config
  - name: Ensure MyGet NuGet Source  
    shell: bash
    env: 
      MYGET_PRE_AUTH_URL: ${{ inputs.myget-pre-auth-url }}
    run: |
      if [ "$MYGET_PRE_AUTH_URL" ]; then
        dotnet nuget add source "$MYGET_PRE_AUTH_URL" -n myget --configfile ./nuget.config
      fi
  - name: Prepare
    id: prep
    shell: bash
    run: |
      DOCKER_IMAGE=registry.cmicloud.ch:4443/${{ inputs.app-name }}
      VERSION=edge
      if [[ $GITHUB_REF == refs/tags/* ]]; then
        VERSION=${GITHUB_REF#refs/tags/}
      elif [[ $GITHUB_REF == refs/heads/* ]]; then
        VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
      elif [[ $GITHUB_REF == refs/pull/* ]]; then
        VERSION=pr-${{ github.event.number }}
      fi
      TAGS="-t ${DOCKER_IMAGE}:${VERSION}"
      if [ "${{ github.event_name }}" = "push" ]; then
        TAGS="$TAGS -t ${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
      fi
      echo ::set-output name=version::${VERSION}
      echo ::set-output name=tags::${TAGS}
      echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
  - name: Set up Docker Buildx
    shell: bash
    run: docker buildx install
  - name: Login to our Registry
    env:
      DOCKER_PASSWORD: ${{ inputs.docker-password }}
      DOCKER_USERNAME: ${{ inputs.docker-username }}
    shell: bash
    run: docker login "$DOCKER_USERNAME"  foo --password "$DOCKER_PASSWORD" 
  - name: Build and push
    shell: bash
    run: |
      docker build ./code --secret id=nuget_config,src=./nuget.config \
      ${{ steps.prep.outputs.tags }} \
      --label org.opencontainers.image.source=${{ github.event.repository.html_url }} \
      --label org.opencontainers.image.created=${{ steps.prep.outputs.created }} \
      --label org.opencontainers.image.revision=${{ github.sha }}
  - name: remove nuget config
    shell: bash
    run: rm -f /.nuget.config
  - name: create extractcontainer
    shell: bash
    run: read tag <<< $(docker images -q) && docker create --name extract "$tag"
  - name: extract buildresult
    shell: bash
    run: docker cp extract:/app ./extracted-app
  - name: remove extractcontainer
    shell: bash
    run: docker rm extract
  - name: Upload artifacts using uploadArtifact()
    shell: bash
    run: |
      node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().uploadArtifact('${{ inputs.app-name }}',['./extracted-app'], '${{ github.workspace }}'))"