name: 'Build ASP 3.1'
description: 'Builds ASP Core 3.1 WebApps'
inputs:
  app-name:
    description: 'Name for artifacts and Docker images'
    required: true
    default: 'aspapp'
outputs:
runs:
  using: "composite"
  runs-on: ubuntu-latest
  steps:
  - uses: actions/checkout@v2
  - name: Add nuget.config
      run: |
        dotnet new nugetconfig -o /tmp/nuget.config
    - name: Ensure MyGet NuGet Source
      run: |
        dotnet nuget add source ${{ secrets.MYGET_PRE_AUTH_URL }} -n myget --configfile /tmp/nuget.config
  - name: Prepare
    id: prep
    run: |
      DOCKER_IMAGE=registry.cmicloud.ch:4443/${{ inputs.app-name }}
      VERSION=edge
      if [[ $GITHUB_REF == refs/tags/* ]]; then
        VERSION=${GITHUB_REF#refs/tags/}
      elif [[ $GITHUB_REF == refs/heads/* ]]; then
        VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
      elif [[ $GITHUB_REF == refs/pull/* ]]; then
        VERSION=pr-${{ github.event.number }}
      fi
      TAGS="${DOCKER_IMAGE}:${VERSION}"
      if [ "${{ github.event_name }}" = "push" ]; then
        TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
      fi
      echo ::set-output name=version::${VERSION}
      echo ::set-output name=tags::${TAGS}
      echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1
  - name: Login to our Registry
    if: github.event_name != 'pull_request'
    uses: docker/login-action@v1 
    with:
      registry: registry.cmicloud.ch:4443
      username: ${{ secrets.DOCKER_USERNAME }}
      password: ${{ secrets.DOCKER_PASSWORD }}
  - name: Build and push
    uses: docker/build-push-action@v2
    with:
      context: .
      push: ${{ github.event_name != 'pull_request' }}
      tags: ${{ steps.prep.outputs.tags }}
      secrets: |
        "nuget_config=/tmp/nuget.config"
      labels: |
        org.opencontainers.image.source=${{ github.event.repository.html_url }}
        org.opencontainers.image.created=${{ steps.prep.outputs.created }}
        org.opencontainers.image.revision=${{ github.sha }}
  - name: remove nuget config
    run: rm -f /tmp/nuget.config
  - name: create extractcontainer
    run: read tag <<< $(docker images -q) && docker create --name extract "$tag"
  - name: extract buildresult
    run: docker cp extract:/app ./extracted-app
  - name: remove extractcontainer
    run: docker rm extract
  - name: publish artifact
    uses: actions/upload-artifact@v1
    with:
      name: ${{ inputs.app-name }} Release Build
      path: ./extracted-app